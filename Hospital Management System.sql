CREATE DATABASE HospitalDB;
USE HospitalDB;

-- Create Patients Table
CREATE TABLE Patients (
    PatientID INT PRIMARY KEY IDENTITY(1,1),
    FirstName NVARCHAR(50),
    LastName NVARCHAR(50),
    DOB DATE,
    Phone NVARCHAR(15),
    Email NVARCHAR(100),
    Gender CHAR(1),
    Address NVARCHAR(255)
);

-- Create Doctors Table
CREATE TABLE Doctors (
    DoctorID INT PRIMARY KEY IDENTITY(1,1),
    FirstName NVARCHAR(50),
    LastName NVARCHAR(50),
    Specialization NVARCHAR(100),
    HireDate DATE,
    Phone NVARCHAR(15)
);

-- Create Appointments Table
CREATE TABLE Appointments (
    AppointmentID INT PRIMARY KEY IDENTITY(1,1),
    PatientID INT FOREIGN KEY REFERENCES Patients(PatientID),
    DoctorID INT FOREIGN KEY REFERENCES Doctors(DoctorID),
    AppointmentDate DATE,
    Status NVARCHAR(20)
);

-- Create Treatments Table
CREATE TABLE Treatments (
    TreatmentID INT PRIMARY KEY IDENTITY(1,1),
    PatientID INT FOREIGN KEY REFERENCES Patients(PatientID),
    DoctorID INT FOREIGN KEY REFERENCES Doctors(DoctorID),
    TreatmentType NVARCHAR(100),
    StartDate DATE,
    EndDate DATE,
    Cost DECIMAL(10,2)
);

-- Create MedicalRecords Table
CREATE TABLE MedicalRecords (
    RecordID INT PRIMARY KEY IDENTITY(1,1),
    PatientID INT FOREIGN KEY REFERENCES Patients(PatientID),
    TreatmentID INT FOREIGN KEY REFERENCES Treatments(TreatmentID),
    Diagnosis NVARCHAR(255),
    Prescription NVARCHAR(255),
    Notes NVARCHAR(500)
);

-- Insert data into Patients table
INSERT INTO Patients (FirstName, LastName, DOB, Phone, Email, Gender, Address)
VALUES
('John', 'Doe', '1985-07-15', '555-1234', 'john.doe@example.com', 'M', '123 Maple St.'),
('Jane', 'Smith', '1990-02-25', '555-5678', 'jane.smith@example.com', 'F', '456 Oak St.'),
('Mike', 'Johnson', '1978-11-02', '555-8765', 'mike.johnson@example.com', 'M', '789 Pine St.');

-- Insert data into Doctors table
INSERT INTO Doctors (FirstName, LastName, Specialization, HireDate, Phone)
VALUES
('Sarah', 'Brown', 'Cardiology', '2012-05-20', '555-4321'),
('David', 'Wilson', 'Dermatology', '2015-10-30', '555-7654'),
('Laura', 'White', 'Neurology', '2018-09-15', '555-0987');

-- Insert data into Appointments table
INSERT INTO Appointments (PatientID, DoctorID, AppointmentDate, Status)
VALUES
(1, 1, '2024-09-01', 'Completed'),
(2, 2, '2024-09-03', 'Scheduled'),
(3, 3, '2024-09-05', 'Cancelled');

-- Insert data into Treatments table
INSERT INTO Treatments (PatientID, DoctorID, TreatmentType, StartDate, EndDate, Cost)
VALUES
(1, 1, 'Surgery', '2024-08-20', '2024-08-25', 5000.00),
(2, 2, 'Therapy', '2024-08-15', '2024-08-30', 1200.00),
(3, 3, 'Checkup', '2024-08-10', '2024-08-10', 200.00);

-- Insert data into MedicalRecords table
INSERT INTO MedicalRecords (PatientID, TreatmentID, Diagnosis, Prescription, Notes)
VALUES
(1, 1, 'Heart Disease', 'Atorvastatin', 'Patient recovering well after surgery.'),
(2, 2, 'Skin Rash', 'Hydrocortisone', 'Undergoing therapy, expected recovery in 2 weeks.'),
(3, 3, 'Migraine', 'Ibuprofen', 'No significant issues found.');

select * from Patients;
select * from Doctors;
select * from Appointments;
select * from Treatments;
select * from MedicalRecords;

--Retrieve patients who have more than one appointment.
select p.FirstName, p.LastName,  count(a.AppointmentID) as no_appointment
from Patients p
join Appointments a on p.PatientID = a.PatientID
group by p.FirstName, p.LastName
having count(a.AppointmentID) > 1;

--Find doctors who have treated more than 2 patients.
select d.FirstName, d.LastName, count(a.PatientID) as no_patients
from Doctors d
join Appointments a on d.DoctorID = a.DoctorID
group by d.FirstName, d.LastName
having count(a.PatientID) > 2;

--List the top 3 most expensive treatments.
select top 3 TreatmentType, cost from Treatments; 

--Retrieve the average treatment cost for each type of treatment.
select TreatmentType, avg(cost) as avg_cost from Treatments group by TreatmentType; 

--List all patients who have completed appointments.
select p.FirstName, p.LastName 
from Patients p
join Appointments a on p.PatientID = a.PatientID
where a.Status = 'Completed';

--Find patients treated by a specific doctor (e.g., Doctor 'Sarah Brown').
select p.FirstName, p.LastName, d.FirstName, d.LastName
from Patients p
join Appointments a on p.PatientID = a.PatientID
join Doctors d on a.DoctorID = a.DoctorID
where d.FirstName = 'Sarah' and d.LastName = 'Brown';

--Calculate the total revenue generated by all treatments.
select sum(cost) as total_revenue from Treatments;

--Retrieve the details of patients who have no medical records.
select p.FirstName, p.LastName, count(m.RecordID) as no_records
from Patients p
join MedicalRecords m on p.PatientID = m.PatientID
group by p.FirstName, p.LastName
having count(m.RecordID) is null; 

--List doctors and the number of treatments they have performed.
select d.FirstName, d.LastName, count(t.TreatmentID) as no_treatments
from Doctors d
join Treatments t on d.DoctorID = t.DoctorID
group by d.FirstName, d.LastName;

--Get the patient with the most expensive treatment.
select p.FirstName, p.LastName, t.Cost
from Patients p 
join Treatments t on p.PatientID = t.PatientID
where t.cost = (select max(cost) from Treatments);

--Find the Latest Appointment for Each Patient Using ROW_NUMBER()
select PatientID, FirstName, LastName, AppointmentDate, Status
from ( select p.PatientID, p.FirstName, p.LastName, a.AppointmentDate, a.Status,
		ROW_NUMBER() over (partition by p.patientID order by a.AppointmentDate desc) as rn
		from Patients p
		join Appointments a on p.PatientID = a.PatientID)
	as LatestAppointments
	where rn = 1;

--Rank Doctors Based on Total Number of Treatments Using RANK()
select DoctorID, FirstName, LastName, TreatmentCount, RANK() over (order by TreatmentCount desc) as rn
	 from (select d.doctorID, d.FirstName, d.LastName, count(t.TreatmentID) as TreatmentCount
		   from Doctors d
		   join Treatments t on d.DoctorID = t.DoctorID
		   group by d.doctorID, d.FirstName, d.LastName) 
	 as DoctoTreatmentCount;

--Calculate the Running Total of Treatment Costs Per Patient Using SUM() with a Window Function
select p.PatientID, p.FirstName, p.LastName, t.TreatmentType, t.StartDate, t.Cost,
	   sum(t.Cost) over (partition by p.PatientID ) as RunningCost
	   from Patients p 
	   join Treatments t on p.PatientID = t.PatientID
	   order by t.StartDate;

--Rank Patients Based on Their Total Treatment Costs Using DENSE_RANK()
select p.PatientID, p.FirstName, p.LastName, t.Cost,
	   dense_rank() over (order by t.cost desc) as rank
	from Patients p 
	join Treatments t on p.PatientID = t.PatientID; 

--Find the Difference Between Current and Previous Treatment Costs for Each Patient Using LAG()
select p.PatientID, p.FirstName, p.LastName, t.TreatmentType, t.StartDate, t.Cost, 
	   LAG(t.Cost,1) over (partition by p.PatientID order by t.StartDate) as CostDifference
	   from Patients p
	   join Treatments t on p.PatientID = t.PatientID
	   order by p.PatientID, t.StartDate;
